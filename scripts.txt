create table signup.users(
users_id serial4 not null,
users_email varchar,
users_password varchar,
users_fullname varchar,
users_creationdate timestamp,
constraint users_pkey primary key (users_id)
);

create table signup.climate(
climate_id serial4 not null,
users_id int not null,
city_name varchar,
temperature float,
temperature_min float,
temperature_max float,
humidity float,
speed float,
constraint climate_pkey primary key (climate_id),
constraint users_id_fkey foreign key (users_id)
references signup.users(users_id)
);

CREATE OR REPLACE FUNCTION signup.usp_register(in_data text, out out_result text )
	RETURNS text
	LANGUAGE plpgsql
AS $function$
declare 
	vjson_data json;
	vemail varchar;
	vpassword varchar;
	vname varchar;

	begin
		vjson_data := in_data::json;
		vemail := (vjson_data->>'users_email'):: varchar;
		vpassword := (vjson_data->>'users_password'):: varchar;
		vname := (vjson_data->>'users_name'):: varchar;
		
			INSERT INTO signup.users (users_email,users_password,users_name,users_creationdate)
				VALUES (vemail,vpassword,vname,now());
			
			select row_to_json(r)::jsonb
			into out_result
			from (select * from signup.users where signup.users.users_email = vemail) as r  ;
	END;
$function$
;

CREATE OR REPLACE FUNCTION signup.usp_register_climate(in_data text, out out_result text )
	RETURNS text
	LANGUAGE plpgsql
AS $function$
declare 
	vjson_data json;
	vuser_id varchar;
	vcity_name varchar;
	vtemperature varchar;
	vtemperature_min float;
	vtemperature_max float;
	vhumidity float;
	vspeed float;

	begin
		vjson_data := in_data::json;
		vuser_id := (vjson_data->>'users_id'):: int ;
		vcity_name := (vjson_data->>'city_name'):: varchar;
		vtemperature := (vjson_data->>'temperature'):: float;
		vtemperature_min := (vjson_data->>'temperature_min'):: float;
		vtemperature_max := (vjson_data->>'temperature_max'):: float;
		vhumidity := (vjson_data->>'humidity'):: float;
		vspeed := (vjson_data->>'speed'):: float;
		
			INSERT INTO signup.climate (users_id,
										city_name,
										temperature,
										temperature_min,
										temperature_max,
										humidity,
										speed)
				VALUES (vuser_id::int,
						vcity_name,
						vtemperature::float,
						vtemperature_min::float,
						vtemperature_max::float,	
						vhumidity::float,
						vspeed::float);
			
			select row_to_json(r)::jsonb
			into out_result
			from (select * from signup.climate order by signup.climate.climate_id desc) as r  ;
	END;
$function$
;

CREATE OR REPLACE FUNCTION signup.usp_login(in_data text, out out_result text )
	RETURNS text
	LANGUAGE plpgsql
AS $function$
declare 
	vjson_data json;
	vemail varchar;
	vpassword varchar;
	vendpass varchar;

	begin
		vjson_data := in_data::json;
		vemail := (vjson_data->>'users_email'):: varchar;
		vpassword := (vjson_data->>'users_password'):: varchar;
	
			select row_to_json(r)::jsonb
			into out_result
			from (select * from signup.users where signup.users.users_email = vemail  AND signup.users.users_password = vpassword) as r  ;
	END;
$function$
;